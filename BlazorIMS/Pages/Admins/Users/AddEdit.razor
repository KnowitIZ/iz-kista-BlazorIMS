@page "/user/create"
@page "/user/edit/{id}"
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager? _navigationManager
@attribute [Authorize(Roles = "Admins")]

<PageTitle>@_title</PageTitle>
<h3 class="bg-@(string.IsNullOrEmpty(Id) ? "primary" : "warning") text-white text-center p-1">@_title</h3>

<Errors Items="@_errors" />

<EditForm Model="@_model" OnValidSubmit="save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(Id))
    {
        <div class="form-group">
            <label>ID</label>
            <input class="form-control" disabled value="@Id" />
        </div>
    }
    @*<div class="form-group">
        <label>User Name</label>
        <InputText class="form-control" @bind-Value="@_model.UserName" />
        <ValidationMessage For="@(() => _model.UserName)" />
    </div>*@
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="@_model.Email" />
        <ValidationMessage For="@(() => _model.Email)" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="@_model.Password" />
        <ValidationMessage For="@(() => _model.Password)" />
    </div>
    <div class="mt-2">
        <button type="submit" class="btn btn-@(string.IsNullOrEmpty(Id) ? "primary" : "warning")">Save</button>
        <NavLink class="btn btn-light" href="users">Cancel</NavLink>
    </div>
</EditForm>
@code {
    [Parameter]
    public string Id { get; set; }

    private RegisterViewModel _model { get; set; } = new();
    private string _title = string.Empty;
    private List<string> _errors = new();

    protected override async void OnParametersSet()
    {
        _title = string.IsNullOrEmpty(Id) ? "Create" : "Edit" + " User";

        if (!string.IsNullOrEmpty(Id))
        {
            var model = await _userManager.Users.FirstOrDefaultAsync(x => x.Id == Id) ?? new();

            //_model.UserName = model.UserName;
            _model.Email = model.Email;
        }

        StateHasChanged();
    }
    public async Task save()
    {
        _errors.Clear();
        IdentityResult result = null;

        if (string.IsNullOrEmpty(Id))
        {
            if (string.IsNullOrEmpty(_model.Password))
            {
                _errors.Add("Please enter a password");
            }
            else
            {
                IdentityUser user = new IdentityUser { UserName = _model.Email, Email = _model.Email, EmailConfirmed = true, PhoneNumberConfirmed = true };
                result = await _userManager.CreateAsync(user, _model.Password);
            }
        }
        else
        {
            IdentityUser user = await _userManager.FindByIdAsync(Id);
            user.UserName = _model.Email;
            user.Email = _model.Email;
            result = await _userManager.UpdateAsync(user);
            if (result.Succeeded && !String.IsNullOrEmpty(_model.Password))
            {
                await _userManager.RemovePasswordAsync(user);
                result = await _userManager.AddPasswordAsync(user, _model.Password);
            }
        }

        if (result!.Succeeded)
        {
            _navigationManager?.NavigateTo("/users");
        }

        foreach (IdentityError err in result.Errors)
        {
            _errors.Add(err.Description);
        }
    }
}