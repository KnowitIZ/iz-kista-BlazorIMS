@page "/users"
@inject UserManager<IdentityUser> _userManager
@inject IJSRuntime _js
@attribute [Authorize(Roles = "Admins")]

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>

<a class="btn btn-primary" href="user/create">Create</a>

<table class="table table-sm table-bordered">
    <thead>
        <tr><th>ID</th><th>Name</th><th>Email</th><th></th></tr>
    </thead>
    <tbody>
        @if (!_items.Any())
        {
            <tr><td colspan="4" class="text-center">No User Accounts</td></tr>
        }
        else
        {
            foreach (var item in _items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.UserName</td>
                    <td>@item.Email</td>
                    <td class="text-center">
                        <a class="btn btn-sm btn-warning" href="user/edit/@item.Id">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="@(async ()=> await delete(item.Id))">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<IdentityUser> _items = new();
    private string _title = "Users";

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    private async Task load()
    {
        _items = await _userManager.Users.ToListAsync();
    }

    private async Task delete(string id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            var model = await _userManager.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (model != null)
            {
                await _userManager.DeleteAsync(model);
                await load();
            }
        }
    }
}
