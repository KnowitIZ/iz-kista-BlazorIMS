@page "/register"
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager
@attribute [AllowAnonymous]

<PageTitle>@_title</PageTitle>

<div class="row">
    <div class="offset-3 col-6">
        <h3 class="bg-primary text-white text-center p-1">@_title</h3>

        @if (_errors.Any())
        {
            <Errors Items="@_errors" />
        }

        <EditForm Model="@_model" OnValidSubmit="save">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="@_model.Email" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText class="form-control" @bind-Value="@_model.Password" />
            </div>
            <div class="py-2">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private string _title = "Register";
    private RegisterViewModel _model = new();
    private List<string> _errors = new();

    private async Task save()
    {
        _errors.Clear();

        IdentityUser user = new IdentityUser { UserName = _model.Email, Email = _model.Email };
        IdentityResult result = await _userManager.CreateAsync(user, _model.Password);
        if (result.Succeeded)
        {
            await _userManager.AddToRoleAsync(user, "Employees");
            if (result.Succeeded)
            {
                _navigationManager.NavigateTo("login", forceLoad: true);
            }
        }

        foreach (IdentityError err in result.Errors)
        {
            _errors.Add(err.Description);
        }
    }
}
