@page "/qrscanner/{pagetype}/{inventoryId:int}"
@using ReactorBlazorQRCodeScanner
@inherits OwningComponentBase<ApplicationDbContext>
@inject AuditService _auditService
@inject CurrentUserService _currentUserService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jS
@*https://www.nuget.org/packages/ReactorBlazorQRCodeScanner/*@
@*https://github.com/YannVasseur35/ReactorBlazorQRCodeScanner*@

<PageTitle>@_title</PageTitle>
<h1>@_title</h1>

<QRCodeScanner />

@*@if (!string.IsNullOrEmpty(_scannedCode))
{
    <div class="alert alert-primary" role="alert">
        @_scannedCode
    </div>
}*@

@code {
    private ApplicationDbContext _db => Service;
    private string _title = "QR Scanner";

    [Parameter]
    public int InventoryId { get; set; }
    [Parameter]
    public string? PageType { get; set; }

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private string _scannedCode = string.Empty;

    private IdentityUser? _currentUser;

    private Inventory? _inventory = null;

    protected override async Task OnParametersSetAsync()
    {
        _scannedCode = string.Empty;
        PageType = PageType!.ToLower();

        if (InventoryId > 0)
        {
            _inventory = await _db.Inventories.FirstOrDefaultAsync(x => x.Id == InventoryId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _currentUser = await _currentUserService.GetCurrentUser();

            _onQrCodeScanAction = async (code) => await OnQrCodeScan(code);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(_jS);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
        }
    }

    private async Task OnQrCodeScan(string code)
    {
        if (string.IsNullOrEmpty(_scannedCode))
        {
            _scannedCode = code;

            //StateHasChanged();
            //Console.WriteLine($"OnQrCodeScan {code}");

            await onScannedCode();
            await StopQRScan();
        }
    }

    private async Task onScannedCode()
    {
        if (PageType == "checkout")
        {
            if (InventoryId > 0 && _inventory != null)
            {
                if (_inventory.Id.ToString() == _scannedCode)
                {
                    var inventory = await _db.Inventories.FirstOrDefaultAsync(x => x.Id == _inventory.Id);
                    inventory!.Status = InventoryStatus.CheckedOut;
                    _auditService.ForEdit(inventory, _currentUser!.Id);

                    await _db.SaveChangesAsync();

                    _navigationManager.NavigateTo("inventories");
                }
            }
        }
        
        if (PageType == "checkin")
        {
            if (InventoryId > 0 && _inventory != null)
            {
                if (_inventory.Id.ToString() == _scannedCode)
                {
                    var inventory = await _db.Inventories.FirstOrDefaultAsync(x => x.Id == _inventory.Id);
                    inventory!.Status = InventoryStatus.Available;
                    _auditService.ForEdit(inventory, _currentUser!.Id);

                    await _db.SaveChangesAsync();

                    _navigationManager.NavigateTo("inventories");
                }
            }
        }
    }

    protected async Task StopQRScan()
    {
        await _qrCodeScannerJsInterop!.StopRecording();
    }

}