@page "/qrscanner/{pagetype}"
@using ReactorBlazorQRCodeScanner
@inherits OwningComponentBase<ApplicationDbContext>
@inject AuditService _auditService
@inject CurrentUserService _currentUserService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js

<PageTitle>@_title</PageTitle>
<h1>@_title</h1>

@if (_inventory == null)
{
    <h3>Please show your QR Code to the camera</h3>

    <div class="row text-center">
        <QRCodeScanner />
    </div>
}
else
{
    <table class="table table-striped">
        <tr><td>Id</td><td>@_inventory.Id</td></tr>
        <tr><td>Name</td><td>@_inventory.Name</td></tr>
        <tr><td>Category</td><td>@_inventory.Category</td></tr>
        <tr><td>Location</td><td>@_inventory.Location</td></tr>
        <tr><td>Status</td><td>@_inventory.Status.ToString()</td></tr>
    </table>

    if ((_inventory.Status == InventoryStatus.Available && PageType == "checkout") ||
        (_inventory.Status == InventoryStatus.CheckedOut && PageType == "checkin"))
    {
        <h3>Is this the Inventory you want to @(PageType == "checkin" ? "Checkin" : "Checkout")?</h3>
        <button class="btn btn-primary mx-1" @onclick="@(async () => await onConfirm())">Confirm</button>
    }
    else if (_inventory.Status == InventoryStatus.Available && PageType == "checkin")
    {
        <div class="alert alert-danger">
            The item you are scanning is already checked in!
        </div>
    }
    else if (_inventory.Status != InventoryStatus.Available && PageType == "checkout")
    {
        <div class="alert alert-danger">
            The item you are scanning is NOT Available / @_inventory.Status.ToString()!
        </div>
    }
    @*else if (_currentUserClaims!.IsInRole("Employees") && _inventory.LastModifiedById != _currentUser!.Id)
    {
        if (_inventory.Status == InventoryStatus.CheckedOut)
        {
            <div class="alert alert-danger">
                The item you are scanning is NOT Checked out by You!
            </div>
        }
    }*@

    <button class="btn btn-warning mx-1" @onclick="scanAgain">Scan a new Item</button>
}

@code {
    private ApplicationDbContext _db => Service;

    [Parameter]
    public string? PageType { get; set; }

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;

    private string _title = "QR Scanner ";
    private IdentityUser? _currentUser;
    private ClaimsPrincipal? _currentUserClaims;
    private Inventory? _inventory = null;
    private string? _scannedCode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await _currentUserService.GetCurrentUser();
        _currentUserClaims = await _currentUserService.GetClaimsPrinciple();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _onQrCodeScanAction = async (code) => await OnQrCodeScan(code);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(_js);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _title = "QR Scanner ";
        if (!string.IsNullOrEmpty(PageType))
        {
            PageType = PageType.ToLower();
            if (PageType == "checkout")
            {
                _title += "Checkout";
            }
            else if (PageType == "checkin")
            {
                _title += "Checkin";
            }
        }
    }

    private async Task OnQrCodeScan(string code)
    {
        _inventory = null;
        _inventory = await _db.Inventories.FirstOrDefaultAsync(x => x.Id.ToString() == code);
        StateHasChanged();
    }

    private async Task onConfirm()
    {
        if (_inventory != null)
        {
            if (_inventory.Status == InventoryStatus.Available && PageType == "checkout")
            {
                _inventory!.Status = InventoryStatus.CheckedOut;
            }
            else if (_inventory.Status == InventoryStatus.CheckedOut && PageType == "checkin")
            {
                _inventory!.Status = InventoryStatus.Available;
            }

            _auditService.ForEdit(_inventory!, _currentUser!.Id);
            await _db.SaveChangesAsync();

            scanAgain();
        }        
    }

    private void scanAgain()
    {
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }
}