@page "/inventories"
@page "/inventories/{pagetype}"

@inherits OwningComponentBase<ApplicationDbContext>
@inject IJSRuntime _js
@inject QrCodeGeneratorService _qrCodeGeneratorService
@inject CurrentUserService _currentUserService
@inject AuditService _auditService
@inject NavigationManager _navigationManager

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>

<div class="row mb-3">
    <div class="input-group g-3">
        <input class="form-control" placeholder="Text" @bind="@_searchText" />
        <select class="form-select" @bind="@_selectedCategory">
            <option value="" selected>Category</option>
            @foreach (var item in _categories)
            {
                <option value="@item">@item</option>
            }
        </select>
        <select class="form-select" @bind="@_selectedLocation">
            <option value="" selected>Location</option>
            @foreach (var item in _locations)
            {
                <option value="@item">@item</option>
            }
        </select>
        <select class="form-select" @bind="@_selectedStatus">
            <option value="" selected>Status</option>
            <option value="@InventoryStatus.Available">@InventoryStatus.Available.ToString()</option>
            <option value="@InventoryStatus.CheckedOut">@InventoryStatus.CheckedOut.ToString()</option>
        </select>
        <div>
            <button class="btn btn-light" @onclick="reset" title="Reset"><span class="oi oi-circle-x" aria-hidden="true"></span> Reset</button>
            <button class="btn btn-warning" @onclick="search" title="Search"><span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search</button>
        </div>
    </div>
</div>

<table class="table table-sm table-striped table-bordered table-hover caption-top">
    <caption>Number of Items: @_items.Count()</caption>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Location</th>
            <th>Status</th>
            <th>Description</th>
            <AuthorizeView Roles="Admins">
                <Authorized>
                    <th>QR Code</th>
                    <th><NavLink class="btn btn-primary btn-sm" href="/inventory/create">Create</NavLink></th>
                </Authorized>
            </AuthorizeView>
            <th style="width:1px"></th>
        </tr>
    </thead>
    <tbody>
        @if (_items.Any())
        {
            @foreach (var item in _items)
            {
                <tr class="@(item.Status == InventoryStatus.CheckedOut ? "table-danger" :"")">
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.Location</td>
                    <td>@item.Status.ToString()</td>
                    <td>@item.Description</td>
                    <AuthorizeView Roles="Admins">
                        <Authorized>
                            <td @onclick="@(() => {_qrModal!.Show(item.Id.ToString());})">
                                <img src="@_qrCodeGeneratorService.Genereate(item.Id.ToString())" width="100" height="100" title="@item.Id.ToString()" />
                            </td>
                            <td>
                                <NavLink class="btn btn-info btn-sm" href="@($"/inventory/{item.Id}")">Details</NavLink>
                                <NavLink class="btn btn-warning btn-sm" href="@($"/inventory/edit/{item.Id}")">Edit</NavLink>
                                <button class="btn btn-danger btn-sm" @onclick="@(async () => await delete(item.Id))">Delete</button>
                                <button class="btn btn-light btn-sm" @onclick="@(async () => await clone(item))">Clone</button>
                            </td>
                        </Authorized>
                    </AuthorizeView>
                    <td>
                        @if (item.Status == InventoryStatus.Available)
                        {
                            <a class="btn btn-sm btn-success" href="/qrscanner/checkout/@item.Id">Checkout</a>
                        }

                        @if (item.Status == InventoryStatus.CheckedOut && item.LastModifiedById == _currentUser!.Id)
                        {
                            <a class="btn btn-sm btn-warning" href="/qrscanner/checkin/@item.Id">Checkin</a>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="9" class="text-center">No Inventories</td>
            </tr>
        }
    </tbody>
</table>

<BlazorIMS.Pages.Qr.Details @ref="_qrModal" />

@code {
    private ApplicationDbContext _db => Service;
    private List<Inventory> _items { get; set; } = new();
    private string _title = "Inventories";

    [Parameter]
    public string? PageType { get; set; }

    private List<string> _categories = new();
    private List<string> _locations = new();
    private string _searchText = string.Empty;
    private string _selectedCategory = string.Empty;
    private string _selectedLocation = string.Empty;
    private InventoryStatus? _selectedStatus = null;

    private BlazorIMS.Pages.Qr.Details? _qrModal = new();

    private IdentityUser? _currentUser;
    private ClaimsPrincipal? _claimsPrinciple;

    protected async override Task OnInitializedAsync()
    {
        _currentUser = await _currentUserService.GetCurrentUser();
        _claimsPrinciple = await _currentUserService.GetClaimsPrinciple();

        _categories = await _db.Inventories.Select(x => x.Category).Distinct().ToListAsync();
        _locations = await _db.Inventories.Select(x => x.Location).Distinct().ToListAsync();

        //await load();
    }

    protected override async Task OnParametersSetAsync()
    {
        await load();
    }

    private async Task load()
    {
        var query = getQuery();
        _items = await query.OrderByDescending(x => x.Id).ToListAsync();
    }

    private IQueryable<Inventory> getQuery()
    {
        var query = _db.Inventories.AsQueryable();
        if (!string.IsNullOrEmpty(PageType))
        {
            if (PageType.ToLower() == "checkouts")
            {
                query = query.Where(x => x.LastModifiedById == _currentUser!.Id && x.Status == InventoryStatus.CheckedOut);
            }
        }
        return query;
    }

    private async Task search()
    {
        var query = getQuery();
        if (!string.IsNullOrEmpty(_searchText))
        {
            _searchText = _searchText.ToLower();
            query = query.Where(x => x.Name.ToLower().Contains(_searchText) || x.Description.ToLower().Contains(_searchText)).AsQueryable();
        }

        if (!string.IsNullOrEmpty(_selectedCategory))
        {
            query = query.Where(x => x.Category == _selectedCategory).AsQueryable();
        }

        if (!string.IsNullOrEmpty(_selectedLocation))
        {
            query = query.Where(x => x.Location == _selectedLocation).AsQueryable();
        }

        if (_selectedStatus != null)
        {
            query = query.Where(x => x.Status == _selectedStatus).AsQueryable();
        }

        _items = await query.OrderByDescending(x => x.Id).ToListAsync();
    }
    private async Task reset()
    {
        _searchText = string.Empty;
        _selectedCategory = string.Empty;
        _selectedLocation = string.Empty;
        _selectedStatus = null;

        await search();
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            var model = await _db.Inventories.FirstOrDefaultAsync(x => x.Id == id);
            if (model != null)
            {
                _db.Inventories.Remove(model);
                await _db.SaveChangesAsync();

                await load();
            }
        }
    }

    private async Task clone(Inventory item)
    {
        item.Id = 0;
        _auditService.ForCreate(item, _currentUser!.Id);
        await _db.Inventories.AddAsync(item);
        await _db.SaveChangesAsync();

        await load();
    }

}