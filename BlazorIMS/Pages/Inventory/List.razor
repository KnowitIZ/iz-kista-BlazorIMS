@page "/inventories"
@page "/inventories/{pagetype}"

@inherits OwningComponentBase<ApplicationDbContext>
@inject IJSRuntime _js
@inject QrCodeGeneratorService _qrCodeGeneratorService
@inject CurrentUserService _currentUserService
@inject AuditService _auditService
@inject NavigationManager _navigationManager

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>

<div class="row g-3 mb-3">
    <div class="col-md-2">
        <input class="form-control" placeholder="Free Text Search..." @bind="@_searchText" @bind:event="oninput" @onkeydown="onEnter" />        
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="@_selectedCategory">
            <option value="" selected>Category</option>
            @foreach (var item in _categories)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="@_selectedLocation">
            <option value="" selected>Location</option>
            @foreach (var item in _locations)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="@_selectedStatus">
            <option value="" selected>Status</option>
            <option value="@InventoryStatus.Available">@InventoryStatus.Available.ToString()</option>
            <option value="@InventoryStatus.CheckedOut">@InventoryStatus.CheckedOut.ToString()</option>
        </select>
    </div>
    <div class="col-md-2">
        <div>
            <button class="btn btn-light mx-1" @onclick="reset" title="Reset"><span class="oi oi-circle-x" aria-hidden="true"></span> Reset</button>
            <button class="btn btn-warning mx-1" @onclick="search" title="Search"><span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search</button>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary m-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-sm table-striped table-bordered table-hover caption-top">
            <caption>Number of Items: @_items.Count()</caption>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Location</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Checked Out By</th>
                    <AuthorizeView Roles="Admins">
                        <Authorized>
                            <th>QR Code</th>
                            <th><NavLink class="btn btn-primary btn-sm" href="/inventory/create">Create</NavLink></th>
                        </Authorized>
                    </AuthorizeView>
                    <th style="width:163px"></th>
                </tr>
            </thead>
            <tbody>
                @if (_items.Any())
                {
                    @foreach (var item in _items)
                    {
                        <tr class="@setBackground(item.Model.Status)">
                            <td>@item.Model.Id</td>
                            <td>@item.Model.Name</td>
                            <td>@item.Model.Category</td>
                            <td>@item.Model.Location</td>
                            <td>@item.Model.Description</td>
                            <td>@item.Model.Status.ToString()</td>
                            <td>@(item.Model.Status == InventoryStatus.CheckedOut ? item.Model.LastModifiedBy!.UserName : "")</td>
                            <AuthorizeView Roles="Admins">
                                <Authorized>
                                    <td @onclick="@(() => showQrModal(item.Model.Id.ToString()))">
                                        <img src="@(item.QRCode)" width="100" height="100" title="@item.Model.Id.ToString()" />
                                    </td>
                                    <td>
                                        <NavLink class="btn btn-warning btn-sm m-1" href="@($"/inventory/edit/{item.Model.Id}")">Edit</NavLink>
                                        <button class="btn btn-danger btn-sm m-1" @onclick="@(async () => await delete(item.Model.Id))">Delete</button>
                                        <button class="btn btn-light btn-sm m-1" @onclick="@(async () => await clone(item.Model))">Clone</button>
                                    </td>
                                </Authorized>
                            </AuthorizeView>
                            <td>
                                <NavLink class="btn btn-info btn-sm m-1" href="@($"/inventory/{item.Model.Id}")">Details</NavLink>
                                @*@if (item.Model.Status == InventoryStatus.Available)
                                {
                                    <a class="btn btn-sm btn-success m-1" href="/qrscanner/checkout/@item.Model.Id">Checkout</a>
                                }
                                else if (item.Model.Status == InventoryStatus.CheckedOut && item.Model.LastModifiedById == _currentUser!.Id)
                                {
                                    <a class="btn btn-sm btn-warning m-1" href="/qrscanner/checkin/@item.Model.Id">Checkin</a>
                                }*@
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="text-center">No Inventories</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<BlazorIMS.Pages.Qr.Details @ref="_qrModal" />

@code {
    private ApplicationDbContext _db => Service;
    private List<pageViewModel> _items { get; set; } = new();
    private string _title = "Inventories";
    private bool _isLoading = true;

    [Parameter]
    public string? PageType { get; set; }

    private List<string> _categories = new();
    private List<string> _locations = new();
    private string _searchText = string.Empty;
    private string _selectedCategory = string.Empty;
    private string _selectedLocation = string.Empty;
    private InventoryStatus? _selectedStatus = null;

    private BlazorIMS.Pages.Qr.Details? _qrModal = new();

    private IdentityUser? _currentUser;
    private ClaimsPrincipal? _claimsPrinciple;

    protected async override Task OnInitializedAsync()
    {
        _currentUser = await _currentUserService.GetCurrentUser();
        _claimsPrinciple = await _currentUserService.GetClaimsPrinciple();

        _categories = await _db.Inventories.Select(x => x.Category).Distinct().ToListAsync();
        _locations = await _db.Inventories.Select(x => x.Location).Distinct().ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;

        await load();
    }

    private async Task load()
    {
        var query = await getQuery();
        var items = await query.OrderByDescending(x => x.Id).ToListAsync() ?? new();

        setItems(items);
    }

    private void setItems(List<Inventory> items)
    {
        _items.Clear();
        foreach (var item in items)
        {
            _items.Add(new pageViewModel
                {
                    Model = item,
                    QRCode = _qrCodeGeneratorService.Genereate(item.Id.ToString())
                });
        }

        if (_items.Any())
        {
            _items = _items.OrderByDescending(x => x.Model.Id).ToList();
        }

        _isLoading = false;
    }

    private async Task<IQueryable<Inventory>> getQuery()
    {
        var query = _db.Inventories.Include(x => x.LastModifiedBy).AsQueryable();
        if (!string.IsNullOrEmpty(PageType))
        {
            if (PageType.ToLower() == "checkouts")
            {
                if (await _currentUserService.IsInRole("Admins"))
                {
                    query = query.Where(x => x.Status == InventoryStatus.CheckedOut);
                }
                else
                {
                    query = query.Where(x => x.LastModifiedById == _currentUser!.Id && x.Status == InventoryStatus.CheckedOut);
                }
            }
        }
        return query;
    }

    private async Task search()
    {
        _isLoading = true;
        _items.Clear();

        var query = await getQuery();
        if (!string.IsNullOrEmpty(_searchText))
        {
            _searchText = _searchText.ToLower();

            query = query.Where(x =>
                (x.Id.ToString().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.Name) && x.Name.ToLower().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.Category) && x.Category.ToLower().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.Location) && x.Location.ToLower().Contains(_searchText)) ||
                //x.Status.ToString().ToLower().Contains(_searchText) ||
                (!string.IsNullOrEmpty(x.Description) && x.Description.ToLower().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.DataSheet) && x.DataSheet!.ToLower().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.Supplier) && x.Supplier!.ToLower().Contains(_searchText)) ||
                (!string.IsNullOrEmpty(x.Comment) && x.Comment!.ToLower().Contains(_searchText)) ||
                (x.Status == InventoryStatus.CheckedOut && x.LastModifiedBy!.UserName.ToLower().Contains(_searchText))
            ).AsQueryable();
        }

        if (!string.IsNullOrEmpty(_selectedCategory))
        {
            query = query.Where(x => x.Category == _selectedCategory).AsQueryable();
        }

        if (!string.IsNullOrEmpty(_selectedLocation))
        {
            query = query.Where(x => x.Location == _selectedLocation).AsQueryable();
        }

        if (_selectedStatus != null)
        {
            query = query.Where(x => x.Status == _selectedStatus).AsQueryable();
        }

        setItems(await query.ToListAsync());
    }
    private async Task reset()
    {
        _searchText = string.Empty;
        _selectedCategory = string.Empty;
        _selectedLocation = string.Empty;
        _selectedStatus = null;

        await search();
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            var model = await _db.Inventories.FirstOrDefaultAsync(x => x.Id == id);
            if (model != null)
            {
                _db.Inventories.Remove(model);
                await _db.SaveChangesAsync();

                await load();
            }
        }
    }

    private async Task clone(Inventory item)
    {
        item.Id = 0;
        _auditService.ForCreate(item, _currentUser!.Id);
        await _db.Inventories.AddAsync(item);
        await _db.SaveChangesAsync();

        await load();
    }

    private async Task onEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await search();
        }
    }

    private void showQrModal(string id)
    {
        _qrModal!.Show(id);
    }

    private string setBackground(InventoryStatus status)
    {
        string result = string.Empty;
        if (status == InventoryStatus.CheckedOut)
        {
            result = "table-warning";
        }
        else if (status == InventoryStatus.Broken)
        {
            result = "table-danger";
        }
        return result;
    }

    private class pageViewModel
    {
        public Inventory Model { get; set; } = new();
        public string QRCode { get; set; } = string.Empty;
    }
}